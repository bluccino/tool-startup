#!/bin/bash
# stup - startup standard bash working environment from scratch
# Copyright (c) 2024 Bluenetics GmbH
# SPDX-License-Identifier: Apache-2.0

   if [ "$*" == "-?" ] || [ "$*" == "--help" ] || [ "$*" == "--?" ]; then
      stup ---g "usage: startup standard bash working environment from scratch (version `stup --version`)"
      echo      '  . stup                # create & source resource file ~/bin/profile.sh'
      echo      '  stup                  # check system installation (same as stup --check)'
      echo      '  stup --system         # refresh system updates/upgrades'
      echo      '  stup --git            # install git'
      echo      '  stup --pimp           # install pimp'
      echo      '  stup --pip            # install pip (package installer for Python)'
      echo      '  stup --venv           # install venv (virtual Python environment)'
      echo      '  stup --python         # install Python 3.11'
      echo      '  stup --profile        # install ~/bin/profile.sh'
      echo      '  stup --tree           # install tree'
      echo      '  stup --vamos          # install vamos'
      echo      '  stup --wd             # install ec, idb and wd'
      echo      '  stup --zsdk           # install Zephyr software development kit'

      if [ "$*" != "-?" ]; then  # comprehensive help
         stup ---c "targets:"
         echo      '  1) directory creation of ~/bin, ~/etc, ~/tmp'
         echo      '  2) installation of script ~/bin/prompt.sh'
         echo      '  3) installation of script ~/bin/profile.sh'
         echo      '  4) sourcing ~/bin/profile.sh from .bashrc'
         echo      '  5) installation of curl'
         echo      '  6) installation of git'
         echo      '  7) installation of python'
         echo      '  8) installation of pip'
         echo      '  9) installation of pimp, ec, idb and wd'
         stup ---c 'tasks of script ~/bin/profile.sh:'
         echo      '  a) adding ~/bin at the beginning of $PATH'
         echo      '  b) exporting BIN=~/bin, ETC=~/etc, TMP=~/tmp'
         echo      '  c) exporting BLU=https://github.com/bluccino'
         echo      '  d) providing alias wd and activate'
         echo      ''
         stup ---g 'enhanced commands'
         echo      '  . bash ~stup -!    # install stup in a binary directory'
         echo      '  . stup --prompt    # set standard prompt'
         echo      '  stup --apt            # update advanced packaging tool (on Linux)'
         echo      '  stup --brew           # update home brew stuff (on MacOS)'
         echo      '  stup --check       # check installation'
         echo      '  stup --update      # stup version update'
         echo      ''
         stup ---g 'environment variables:'
         echo      '  WORKDIR:   path of current working directory'
         echo      '  WORKIDB:   path of info database (storing label related info)'
         echo      ''
         stup ---g 'install pimped standard Python workspace:'
         echo      '  $ mkdir /opt/zephyr/z3.6.99  # create Zephyr workspace topdir'
         echo      '  $ cd /opt/zephyr/z3.6.99     # navigate to Zephyr workspace topdir'
         echo      '  $ pimp -i @z3.6.99           # init pimp to create @z3.6.99'
         echo      '  $ pimp -z                    # prepare pimping of Zephyr workspace'
         echo      '  $ . pimp                     # run pimp process'
         echo      '  $ pip install west           # install west in @z3.6.99'
         echo      '  $ west init                  # init for standard Zephyr workspace'
         echo      '  $ west update                # update Zephyr workspace'
         echo      '  $ west zephyr-export         # export Zephyr Cmake package'
         echo      '  $ pip install -r zephyr/scripts/requirements.txt  # install Zephyr requirements'
         echo      ''
         stup ---g 'install pimped specific Python workspace:'
         echo      '  $ mkdir /opt/zephyr/z3.6.0   # create Zephyr workspace topdir'
         echo      '  $ cd /opt/zephyr/z3.6.0      # navigate to Zephyr workspace topdir'
         echo      '  $ pimp -i @z3.6.0            # init pimp to create @z3.6.0'
         echo      '  $ pimp -z                    # prepare pimping of Zephyr workspace'
         echo      '  $ . pimp                     # run pimp process'
         echo      '  $ pip install west           # install west in @z3.6.0'
         echo      '  $ west init -mr v3.6.0       # init Zephyr workspace revision v3.6.0'
         echo      '  $ west update                # update Zephyr workspace'
         echo      '  $ west zephyr-export         # export Zephyr Cmake package'
         echo      '  $ pip install -r zephyr/scripts/requirements.txt  # install Zephyr requirements'
      fi
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#===============================================================================
# stup --version (stup --v)  # print version
#===============================================================================

   if [ "$*" == "--version" ] || [ "$*" == "--v" ]; then
      echo "1.0.0j"
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
#===============================================================================
# examine whether this script is running in sourced/unsourced mode
# - note: each dispatching clause needs to unset _SOURCED
#===============================================================================
#-------------------------------------------------------------------------------

   (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED

#-------------------------------------------------------------------------------
# stup     # check system requirements
# . stup   # create & source resource file ~/bin/profile.sh
#-------------------------------------------------------------------------------

   if [ "$*" == "" ]; then
      if [ "$_SOURCED" == 0 ]; then
         stup --check || exit 1
      else
         stup  --profile                # create resource file
         source ~/bin/profile.sh    # source resource file
      fi

      unset _SOURCED
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
# . stup --prompt  # setup standard prompt
#-------------------------------------------------------------------------------

   if [ "$*" == "--prompt" ]; then
      if [ "$_SOURCED" == 0 ]; then
         stup ---r "bad command line: stup $*"
         echo      "    this command must be sourced (. stup --prompt)!"
      fi

      export PS1="\[\e[35m\]\W\[\e[m\] $ "
      unset _SOURCED
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
# . ~stup -!  # install ~stup in ~/bin/
#-------------------------------------------------------------------------------

   if [ "$*" == "-!" ]; then
      if [ "$_SOURCED" == 0 ]; then
         stup ---r "bad command line: bash ~stup -! (or: ./~stup -!)"
         echo      "    this command must run in sourced mode!"
         unset _SOURCED
         return 1 2>/dev/null || exit 1  # safe return/exit
      fi

      if [ "$BIN" == "" ]; then
         export BIN=~/bin
      fi

      _ERR="0"
      echo $PATH | grep "$BIN:" >/dev/null || _ERR="1"

      if [ "$_ERR" != "0" ]; then
         export PATH=$BIN:$PATH
      fi

      bash ~stup ---!                 # self install

         # now install & source system profile

      bash ~/bin/stup --profile       # install profile
      source ~/bin/profile.sh         # source profile
      bash ~/bin/stup                 # show installation status

      echo '  => enter: stup -?   # to see usage'

      rm -f ~stup                     # cleanup
      unset _ERR
      unset _SOURCED
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
#===============================================================================
# after here only non sourced execution is allowed
#===============================================================================
#-------------------------------------------------------------------------------

    if [ "$_SOURCED" != 0 ]; then
        stup ---r "bad command line: source stup $* (or: . stup $*)"
        echo      "    this command is not allowed to run in sourced mode!"
        unset _SOURCED
        return 1 2>/dev/null || exit 1  # safe return/exit
    fi

#===============================================================================
# stup --install   # install all tools
#===============================================================================

	 if [ "$*" == "--install" ]; then
      . stup                    # install/source profile
      stup --system             # refresh system updates/upgrades
      stup --pimp               # install pimp
      stup --tree               # install tree
      stup --vamos              # install vamos
      stup --python             # install python
      stup --venv               # install venv
      stup --pip                # install pip

      stup --check
      exit 0
   fi

#===============================================================================
# stup --system  # refresh system updates/upgrades'
#===============================================================================

   if [ "$*" == "--system" ]; then
      stup ---is-linux && stup --apt
      stup ---is-macos && stup --brew
      exit 0
   fi

#===============================================================================
# stup --apt   # update advanced packaging tool
#===============================================================================

   if [ "$*" == "--apt" ]; then
      ERR="0"
      stup ---is-linux || ERR="1"   # only for Linux
      if [ "$ERR" != "0" ]; then
         stup ---r "error: stup $*"
         echo      '       --apt option is only allowed on Linux platforms'
         exit 1
      fi

      stup ---g '=== downloads latest package informations ...'
      stup ---y 'sudo apt update'
      sudo apt update || exit 1

      stup ---g '=== upgrade installed packages to latest versions ...'
      stup ---y 'sudo apt upgrade'
      sudo apt upgrade || exit 1

      exit 0
   fi

#===============================================================================
# stup --brew   # update homebrew stuff (on MacOS)
#===============================================================================

   if [ "$*" == "--brew" ]; then
      ERR="0"
      stup ---is-macos || ERR="1"   # only for MacOS
      if [ "$ERR" != "0" ]; then
         stup ---r "error: stup $*"
         echo      '       --brew option is only allowed on MacOS platforms'
         exit 1
      fi

      URL=https://raw.githubusercontent.com/Homebrew/install

      stup ---y 'bash -c "$(curl -fsSL '$URL'/HEAD/install.sh)"'
      bash -c "$(curl -fsSL $URL/HEAD/install.sh)"

         # rebuild ~/bin/profile.sh

      stup --profile
      source ~/bin/profile.sh

      exit 0
   fi

#===============================================================================
# stup --git   # install git
#===============================================================================

   if [ "$*" == "--git" ]; then
      stup ---is-linux && stup ---git-linux
      stup ---is-macos && stup ---git-macos
      exit 0
   fi

#===============================================================================
# stup ---git-linux   # install git on Linux platform
#===============================================================================

   if [ "$*" == "---git-linux" ]; then
      stup ---g '=== install git on Linux platform ...'
      stup ---y 'sudo apt install git'
      sudo apt install git || exit 1
      exit 0
   fi

#===============================================================================
# stup ---git-macos   # install git on MacOS platform
#===============================================================================

   if [ "$*" == "---git-macos" ]; then
      stup ---g '=== install git on MacOS platform ...'
      stup ---y 'brew install git'
      brew install git || exit 1
      exit 0
   fi

#===============================================================================
# stup --pimp   # install pimp
#===============================================================================

   if [ "$*" == "--pimp" ]; then
      stup ---g '=== install pimp ...'

      BLUCCINO=https://raw.githubusercontent.com/bluccino
      REPO=tool-pimp
      URL="$BLUCCINO/$REPO/master"

      stup ---y "curl -s $URL/bin/pimp >$BIN/pimp"
      sudo curl -s $URL/bin/pimp >$BIN/pimp || exit 1

      stup ---y "chmod +x $BIN/pimp"
      sudo chmod +x $BIN/pimp || exit 1

      exit 0
   fi

#===============================================================================
# stup --profile   # install profile.sh
#===============================================================================

   if [ "$*" == "--profile" ]; then
      stup ---g "=== install profile.sh ..."

      PROFILE="$BIN/profile.sh"

      echo '#!/bin/bash' >$PROFILE
      echo '# profile.sh - startup resource file (always source!)' >>$PROFILE
      echo '' >>$PROFILE
      echo "export BIN=~/bin" >>$PROFILE
      echo "export TMP=~/tmp" >>$PROFILE
      echo "export ETC=~/etc" >>$PROFILE
      echo "export GIT=~/Git" >>$PROFILE
      echo "export BLU=https://github.com/bluccino" >>$PROFILE

      echo '' >>$PROFILE
      echo 'export PATH=$BIN:$PATH' >>$PROFILE

      echo '' >>$PROFILE
      echo "alias activate='source pimp --activate'" >>$PROFILE
      echo "alias wd='source wd.sh'" >>$PROFILE
      echo "alias bd='source bd.sh'" >>$PROFILE

      echo '' >>$PROFILE
      echo "export WORKIDB=$ETC" >>$PROFILE

         # make sure that directories exist

      echo '' >>$PROFILE
      echo 'if [ ! -d "$BIN" ]; then mkdir $BIN; fi' >>$PROFILE
      echo 'if [ ! -d "$ETC" ]; then mkdir $ETC; fi' >>$PROFILE
      echo 'if [ ! -d "$TMP" ]; then mkdir $TMP; fi' >>$PROFILE
      echo 'if [ ! -d "$GIT" ]; then mkdir $GIT; fi' >>$PROFILE

         # add extension for MacOS

      stup ---is-macos && stup ---profile-macos

         # set prompt

      echo '' >>$PROFILE
      echo 'source stup --prompt' >>$PROFILE

         # pimp bash profile/recource file (if not yet pimped)

      stup ---is-linux && BARC=~/.bashrc
      stup ---is-wsl && BARC=~/.bashrc
      stup ---is-macos && BARC=~/.bash_profile

      if [ "$BARC" == "" ]; then
         stup ---r "error: cannot identify bash profile/resource file for modification"
         exit 1
      fi

         # pimp bash profile/recource file (if not yet pimped)

      stup ---is-linux && BARC=~/.bashrc
      stup ---is-wsl && BARC=~/.bashrc
      stup ---is-macos && BARC=~/.bash_profile

      if [ "$BARC" == "" ]; then
         stup ---r "error: cannot identify basg profile/resource file for modification"
         exit 1
      fi

      PIMP="0"
      cat $BARC | grep "source $BIN/profile.sh" >/dev/null || PIMP="1"
      if [ "$PIMP" != "0" ]; then
         stup ---g "=== pimp $BARC with 'source $BIN/profile.sh' ..."
         echo '' >>$BARC
         echo "source $BIN/profile.sh" >>$BARC
      fi

      exit 0
   fi

#===============================================================================
# stup ---profile-macos   # add homebrew setup to profile on Mac
#===============================================================================

   if [ "$*" == "---profile-macos" ]; then
      PROFILE=$BIN/profile.sh

         # update ~/bin/profile.sh to deal with homebrew

      stup ---g "=== update ~/bin/profile.sh to add /opt/homebrew/bin to PATH ..."
      echo '' >>$PROFILE
      echo "echo '=== add homebrew to path ...'" >>$PROFILE
      echo 'export PATH=/opt/homebrew/bin:$PATH' >>$PROFILE

      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>$PROFILE
      echo 'export PATH="/opt/homebrew/opt/python/libexec/bin:$PATH"' >>$PROFILE

      exit 0
   fi

#===============================================================================
# stup --python   # upgrade to Python 3.11
#===============================================================================

   if [ "$*" == "--python" ]; then
      stup ---is-macos  && stup ---python-macos
      stup ---is-ubuntu && stup ---python-ubuntu
      stup ---is-debian && stup ---python-debian
      exit 0
   fi

#===============================================================================
# stup ---python-macos  # install python3.11 on MacOS
#===============================================================================

   if [ "$*" == "---python-macos" ]; then
      stup ---g '=== installing python 3.11 for MacOS ...'
      brew install python@3.11 || exit 1
      exit 0
   fi

#===============================================================================
# stup ---python-ubuntu # install python3.11 on ubuntu
#===============================================================================

   if [ "$*" == "---python-ubuntu" ]; then
      stup ---g '=== installing python 3.11 for ubuntu ...'
      stup ---y 'sudo apt-get install python3.11'
      sudo apt-get install python3.11 || exit 1

      stup ---g '=== setup python3.11 as python3 standard ...'

      PYTHON3=`which python3`
      if [ "$PYTHON3" == "" ]; then
         stup ---r "error: no existing python3 installation"
         exit 1
      fi

      PYTHON3_11=`which python3.11`
      if [ "$PYTHON3_11" == "" ]; then
         stup ---r "error: no existing python3.11 installation"
         exit 1
      fi

      stup ---y "rm $PYTHON3"
      sudo rm $PYTHON3
      stup ---y "ln $PYTHON3_11 $PYTHON3"
      sudo ln $PYTHON3_11 $PYTHON3

      exit 0
   fi

#===============================================================================
# stup ---python-debian # install python3.11 on debian
#===============================================================================

   if [ "$*" == "---python-debian" ]; then
      cd $TMP

      sudo apt install wget build-essential libncursesw5-dev libssl-dev \
         libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev

      wget https://www.python.org/ftp/python/3.11.7/Python-3.11.7.tgz
      tar xzf Python-3.11.7.tgz

      cd Python-3.11.7
      ./configure --enable-optimizations

      stup ---< "make -j 4  # 4 cores"
      make -j 4     # 4 cores
      #make altinstall

      stup ---y "sudo install -c python /usr/local/bin/python3.11"
      sudo install -c python /usr/local/bin/python3.11

      PYTHON3=`which python3`
      if [ "$PYTHON3" == "" ]; then
         stup ---r "error: no existing python3 installation"
         exit 1
      fi

      PYTHON3_11=`which python3.11`
      if [ "$PYTHON3_11" == "" ]; then
         stup ---r "error: no existing python3.11 installation"
         exit 1
      fi

      stup ---y "rm $PYTHON3"
      sudo rm $PYTHON3
      stup ---y "ln $PYTHON3_11 $PYTHON3"
      sudo ln $PYTHON3_11 $PYTHON3

         # cleanup

      cd ..
      rm -rf Python-3.11.7.tgz Python-3.11.7
      exit 0
   fi

#===============================================================================
# stup --python   # upgrade to Python 3.11
#===============================================================================

   if [ "$*" == "--zsdk" ]; then
      stup ---is-macos  && stup ---zsdk-macos
      stup ---is-ubuntu && stup ---zsdk-ubuntu
      stup ---is-debian && stup ---zsdk-debian
      exit 0
   fi

#===============================================================================
# stup ---zsdk-macos  # install python3.11 on MacOS
#===============================================================================

   if [ "$*" == "---zsdk-macos" ]; then
      stup ---g "=== installing Zephyr SDK on MacOS ..."

      if [ ! -d "/opt" ]; then
         stup ---y "sudo mkdir /opt"
         sudo mkdir /opt || exit 1
      fi

      if [ ! -d "/opt/zephyr" ]; then
         stup ---y "sudo `whoami` /opt/zephyr"
         sudo mkdir /opt/zephyr || exit 1
         sudo chown `whoami` /opt/zephyr
      fi

      stup ---y "cd /opt/zephyr"
      cd /opt/zephyr
      stup ---c "working now in: `pwd`"

      URL=https://github.com/zephyrproject-rtos/sdk-ng/releases/download
      ZSDK=zephyr-sdk-0.16.5-1_macos-aarch64.tar.xz

      stup ---g "=== download $ZSDK for MacOS ARM64 platform ..."
      stup ---y "curl -L -O $URL/v0.16.5-1/$ZSDK"
      curl -L -O $URL/v0.16.5-1/$ZSDK

      stup ---g "=== checking integrity of $ZSDK ..."
      stup ---y "curl -L $URL/v0.16.5-1/sha256.sum | shasum --check --ignore-missing"
      curl -L $URL/v0.16.5-1/sha256.sum | shasum --check --ignore-missing

      stup ---g "=== unpacking $ZSDK ..."
      stup ---y "tar xvf $ZSDK"
      tar xvf $ZSDK

      stup ---y "cd zephyr-sdk-0.16.5-1"
      cd zephyr-sdk-0.16.5-1
      stup ---c "working now in: `pwd`"

      stup ---y "./setup.sh"
      ./setup.sh

         # cleanup

      cd ..
      stup ---g "=== cleanup `pwd`"
      stup ---c "working now in: `pwd`"

      stup ---y "rm $ZSDK"
      rm $ZSDK

      stup ---g "=== Zephyr SDK installation complete!"
      exit 1
   fi

#===============================================================================
# stup ---zsdk-debian # install python3.11 on debian
#===============================================================================

   if [ "$*" == "---zsdk-ubuntu" ]; then
      stup ---g "=== installing Zephyr SDK on Ubuntu ..."
      stup ---r "error: stup $*"
      echo      '       --zsdk option is not supported on Ubuntu'
      exit 1
   fi

#===============================================================================
# stup ---zsdk-debian # install python3.11 on debian
#===============================================================================

   if [ "$*" == "---zsdk-debian" ]; then
      stup ---g "=== installing Zephyr SDK on Debian ..."
      stup ---r "error: stup $*"
      echo      '       --zsdk option is not supported on Debian'
      exit 1
   fi

#===============================================================================
# stup --venv   # install venv (virtual Python environment)
#===============================================================================

   if [ "$*" == "--venv" ]; then
      stup ---is-macos  && stup ---venv-macos
      stup ---is-ubuntu && stup ---venv-ubuntu
      stup ---is-debian && stup ---venv-debian
      exit 0
   fi

#===============================================================================
# stup ---venv-macos  # install python3.11 on MacOS
#===============================================================================

   if [ "$*" == "---venv-macos" ]; then
      stup ---r "error: stup $*"
      echo      '       --venv option is only implemented for Linux platforms'
      exit 1
   fi

#===============================================================================
# stup ---venv-ubuntu   # install venv (virtual Python environment) for Ubuntu
#===============================================================================

   if [ "$*" == "---venv-ubuntu" ]; then
      stup ---g '=== installing venv for python 3.11 on ubuntu ...'
      stup ---y 'apt install python3.11-venv'
      sudo apt install python3.10-venv
      sudo apt install python3.11-venv

      exit 0
   fi

#===============================================================================
# stup ---venv-debian   # install venv (virtual Python environment) for Debian
#===============================================================================

   if [ "$*" == "---venv-debian" ]; then
      stup ---g '=== installing venv for python 3.11 on debian ...'
      stup ---y 'apt install python3.11-venv'
      sudo apt install python3.11-venv

      exit 0
   fi

#===============================================================================
# stup --pip   # install pip 3.11
#===============================================================================

   if [ "$*" == "--pip" ]; then
      ERR="0"
      stup ---is-linux || ERR="1"   # only for Linux
      if [ "$ERR" != "0" ]; then
         stup ---r "error: stup $*"
         echo      '       --pip option is only implemented for Linux platforms'
         exit 1
      fi

      stup ---g '=== installing pip for python3 ...'
      stup ---y 'sudo apt install python3-pip'
      sudo apt install python3-pip
      exit 0
   fi

#===============================================================================
# stup --tree   # install tree
#===============================================================================

   if [ "$*" == "--tree" ]; then
      stup ---is-linux && stup ---tree-linux
      stup ---is-macos && stup ---tree-macos
      exit 0
   fi

#===============================================================================
# stup ---tree-linux   # install tree on Linux systems
#===============================================================================

   if [ "$*" == "---tree-linux" ]; then
      stup ---g '=== install tree ...'
      stup ---y 'sudo apt install tree'
      sudo apt install tree || exit 1

      BLUCCINO=https://raw.githubusercontent.com/bluccino
      REPO=tool-tv
      URL="$BLUCCINO/$REPO/master"

      stup ---g '=== install tv (tree view) ...'
      stup ---y "curl -s $URL/bin/tv >$BIN/tv"
      sudo curl -s $URL/bin/tv >$BIN/tv

      stup ---y "chmod +x $BIN/tv"
      sudo chmod +x $BIN/tv

      exit 0
   fi

#===============================================================================
# stup ---tree-macos   # install tree on MacOS systems
#===============================================================================

   if [ "$*" == "---tree-macos" ]; then
      stup ---g '=== install tree ...'
      stup ---y 'brew install tree'
      brew install tree || exit 1

      BLUCCINO=https://raw.githubusercontent.com/bluccino
      REPO=tool-tv
      URL="$BLUCCINO/$REPO/master"

      stup ---g '=== install tv (tree view) ...'
      stup ---y "curl -s $URL/bin/tv >$BIN/tv"
      sudo curl -s $URL/bin/tv >$BIN/tv

      stup ---y "chmod +x $BIN/tv"
      sudo chmod +x $BIN/tv

      exit 0
   fi

#===============================================================================
# stup --vamos   # install pimp
#===============================================================================

   if [ "$*" == "--vamos" ]; then
      stup ---g '=== install vamos ...'

      BLUCCINO=https://raw.githubusercontent.com/bluccino
      REPO=tool-vamos
      URL="$BLUCCINO/$REPO/master"

      stup ---y "curl -s $URL/bin/vamos >$BIN/vamos"
      sudo curl -s $URL/bin/vamos >$BIN/vamos

      stup ---y "chmod +x $BIN/vamos"
      sudo chmod +x $BIN/vamos

      exit 0
   fi

#===============================================================================
#stup --wd  # install ec, idb and wd'
#===============================================================================

   if [ "$*" == "--wd" ]; then
      stup ---g '=== install ec, idb and wd ...'

      BLUCCINO=https://raw.githubusercontent.com/bluccino

      REPO=tool-ec
      URL="$BLUCCINO/$REPO/master"

      stup ---y "curl -s $URL/bin/ec >$BIN/ec"
      sudo curl -s $URL/bin/ec >$BIN/ec
      stup ---y "chmod +x $BIN/ec"
      sudo chmod +x $BIN/ec

      REPO=tool-idb
      URL="$BLUCCINO/$REPO/master"

      stup ---y "curl -s $URL/bin/idb >$BIN/idb"
      sudo curl -s $URL/bin/idb >$BIN/idb
      stup ---y "chmod +x $BIN/idb"
      sudo chmod +x $BIN/idb

      REPO=tool-wd
      URL="$BLUCCINO/$REPO/master"

      stup ---y "curl -s $URL/bin/wd.sh >$BIN/wd.sh"
      sudo curl -s $URL/bin/wd.sh >$BIN/wd.sh
      stup ---y "chmod +x $BIN/wd.sh"
      sudo chmod +x $BIN/wd.sh

      exit 0
   fi

#===============================================================================
# check system OS requirements
#===============================================================================

if [ "$*" == '--check' ]; then
    stup ---c 'checking basic system requirements ...'
    ERR=0

    stup '---check-profile' || ERR=1
    stup '---check-system'  || ERR=1
    stup '---check-git'     || ERR=1
    stup '---check-python'  || ERR=1
    stup '---check-venv'    || ERR=1
    stup '---check-pimp'    || ERR=1

    if [ "$ERR" != 0 ]; then
        stup ---r "error: failing system requirements"
        #echo " => fix with '"
        #stup ---g "vamos --fix"
        #echo "'"
        exit 1
    fi
    exit 0
fi

#===============================================================================
# stup ---check-system  # check for new system updates
#===============================================================================

   if [ "$*" == '---check-system' ]; then
      stup ---is-linux && stup '---check-system-linux' && exit 0
      stup ---is-macos && stup '---check-system-macos' && exit 0
      exit 1
   fi

#===============================================================================
# stup ---check-system-linux  # check for new updates
#===============================================================================

   if [ "$*" == '---check-system-linux' ]; then
      ERR="0"
      stup ---is-linux || ERR="1"   # only for Linux
      if [ "$ERR" == "0" ]; then   # for linux ...
         NUMBER=`apt list --upgradable 2>/dev/null | wc -l`
         ANS=`apt list --upgradable 2>/dev/null`

         #if [ "$NUMBER" == "1" ] && [ "$ANS" != "Listing..." ]; then
         if [ "$NUMBER" == "1" ]; then
            printf '  '
            stup ---G 'OK'
            echo ": system updates"
            exit 0
         else
            printf '  '
            stup ---R 'FAIL'
            echo ": new system updates available => fix with: stup --system"
            exit 1
         fi
         exit 0
      fi

      printf '  '
      stup ---G 'OK'
      echo ": system updates"
      exit 0
   fi

#===============================================================================
# stup ---check-system-macos  # check for homebrew availability and being updated
#===============================================================================

   if [ "$*" == '---check-system-macos' ]; then
      ERR="0"
      stup ---is-macos || ERR="1"  # only for MAcOS
      if [ "$ERR" != "0" ]; then
         stup ---r "error: stup $*"
         echo      '       ---check-system-macos option is only implemented for MacOS platforms'
         exit 1
      fi

      if [ "`which brew`" != "" ]; then
         printf '  '
         stup ---G 'OK'
         echo ": system updates"
         exit 0
      else
         printf '  '
         stup ---R 'FAIL'
         echo ": system updates => fix with: stup --system"
         exit 1
      fi
   fi

#===============================================================================
# check vamos availability
#===============================================================================

if [ "$*" == '---check-vamos' ]; then
    ERR=0
    if [ "`which vamos`" == "" ]; then ERR=1; fi

    if [ "$ERR" == 0 ]; then
        printf '  '
        stup ---G 'OK'
        echo ": playground managing tool (vamos)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": playground managing tool (vamos) not available => fix: stup --vamos"
        exit 1
    fi
fi

#===============================================================================
# check pimp availability
#===============================================================================

if [ "$*" == '---check-pimp' ]; then
    ERR=0
    if [ "`which pimp`" == "" ]; then ERR=1; fi

    if [ "$ERR" == 0 ]; then
        printf '  '
        stup ---G 'OK'
        echo ": pimping tool (pimp)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": pimping tool (pimp) not available => fix: stup --pimp"
        exit 1
    fi
fi

#===============================================================================
# stup ---check-profile  # check ~/bin/profile.sh
#===============================================================================

   if [ "$*" == '---check-profile' ]; then
      if [ -f "$BIN/profile.sh" ]; then
         printf '  '
         stup ---G 'OK'
         echo ": profile (~/bin/profile.sh)"
         exit 0
      else
         printf '  '
         stup ---R 'FAIL'
         echo ": profile (~/bin/profile.sh) => fix with: stup --profile"
         exit 1
      fi
      exit 0
   fi

#===============================================================================
# stup ---check-git  # check git availability
#===============================================================================

if [ "$*" == '---check-git' ]; then
    if [ "`which git`" != "" ]; then
        printf '  '
        stup ---G 'OK'
        echo ": Git version managing tool (git)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": Git version managing tool (git) missing => fix with: stup --git"
        exit 1
    fi
fi

#===============================================================================
# check Python version
#===============================================================================

if [ "$*" == '---check-python' ]; then
    ERR="1"
    stup ---is-linux && ERR="0"
    stup ---is-macos && if [ "`which brew`" != "" ]; then ERR="0"; fi

    if [ "$ERR" == "0" ]; then
       PYVERS=`python3 --version`
       OK=`echo $PYVERS | grep 'Python 3.1'`
    else
       OK=''   # empty python version if system not updated
    fi

    if [ "$OK" != "" ]; then
        printf '  '
        stup ---G 'OK'
        echo ": Python version ($PYVERS)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": Python version ($PYVERS) - must be >= Python 3.10.0 => fix with: stup --python"
        exit 1
    fi
fi

#===============================================================================
# check pip availability
#===============================================================================

if [ "$*" == '---check-pip' ]; then
    ERR=0
    pip --version >/dev/null 2>/dev/null || ERR=1

    if [ "$ERR" == 0 ]; then
        printf '  '
        stup ---G 'OK'
        echo ": Python package manager (pip)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": Python package manager (pip) not available => fix with: stup --pip"
        exit 1
    fi
fi

#===============================================================================
# check venv availability
#===============================================================================

if [ "$*" == '---check-venv' ]; then
    ERR="1"
    stup ---is-linux && ERR="0"
    stup ---is-macos && [ "`which brew`" != "" ] && ERR="0"

    if [ "$ERR" == "0" ]; then
       python3 -m venv -h >/dev/null 2>/dev/null || ERR=1
    fi

    if [ "$ERR" == 0 ]; then
        printf '  '
        stup ---G 'OK'
        echo ": virtual Python environments (venv)"
        exit 0
    else
        printf '  '
        stup ---R 'FAIL'
        echo ": virtual Python environments (venv) not available => fix with: stup --venv"
        exit 1
    fi
fi

#===============================================================================
# ~stup ---!   # install in a system binary directory
#===============================================================================

   if [ "$*" == "---!" ]; then
      if [ ! -f ~stup ]; then
         bash ~stup ---r "error: stup -!" >&2
         echo      "       file ~stup not found!" >&2
         exit 1
      fi
      chmod +x ~stup

      if [ ! -d "$BIN" ]; then
         echo "missing ~/bin directory"
         bash ~stup ---g "=== creating ~/bin"
         mkdir $BIN
      fi

      if [ "$BIN" == "" ]; then  # quit
         exit 0
      fi

      ERR="0"
      touch $BIN/_junk_ >/dev/null || ERR="1"
      rm -f $BIN/_junk_ >/dev/null

      bash ~stup ---g "=== installing stup in $BIN ..."
      if [ "$ERR" == "0" ]; then       # no write protection
         bash ~stup ---y "  cp ~stup $BIN/stup"
         cp ~stup $BIN/stup || exit 1
      else                             # write protection
         bash ~stup ---y "  this is a protected directory which uses a password!"
         bash ~stup ---y "  sudo cp ~stup $BIN/stup"
         sudo cp ~stup $BIN/stup || exit 1
      fi
      bash ~stup ---g "=== successful installation of stup (version `bash ~stup --version`)"

      #rm -f ~stup                      # cleanup
      exit 0
   fi

#===============================================================================
# stup ---directories   # generate list of install directories
#===============================================================================

   if [ "$*" == "--directories" ]; then
      LIST=''
      for CHUNK in $(echo "$PATH" | sed 's/:/ /g')
      do
         LIST="$LIST $CHUNK"
      done
      echo $LIST
      exit 0
   fi

#===============================================================================
# stup --update   # update current stup installation to latest version
#===============================================================================

	 if [ "$1" == "--update" ]; then
	    URL=https://raw.githubusercontent.com/bluccino/tool-stup/master/bin/stup
      STUP=`which stup`

	    stup ---g '=== updating stup ...'

	    echo "  curl -s $URL >~stup"
	    curl -s $URL >~stup

      ERR="0"
      rm -f $STUP >/dev/null || ERR="1"

      if [ "$ERR" == "0" ]; then
	       echo "  cp ~stup $STUP"
         cp ~stup $STUP
	       echo "  chmod +x $STUP"
         chmod +x $STUP
      else
	       echo "  sudo cp ~stup $STUP"
         cp ~stup $STUP
	       echo "  sudo chmod +x $STUP"
         chmod +x $STUP
      fi

      echo '  rm -f ~stup'
      rm -f ~stup

      stup ---g "stup update complete (version `stup --version`)"
	    exit 0
	 fi

#===============================================================================
# stup ---is-linux
#===============================================================================

   if [ "$1" == "---is-linux" ]; then
      if [ -f "/etc/os-release" ]; then
         exit 0   # running on Linux
      fi
      exit 1      # not on Linux
   fi

#===============================================================================
# stup ---is-ubuntu
#===============================================================================

   if [ "$1" == "---is-ubuntu" ]; then
      if [ -f "/etc/os-release" ]; then
         cat /etc/os-release | grep Ubuntu >/dev/null && exit 0
      fi
      exit 1      # not on Linux
   fi

#===============================================================================
# stup ---is-debian
#===============================================================================

   if [ "$1" == "---is-debian" ]; then
      if [ -f "/etc/os-release" ]; then
         cat /etc/os-release | grep Debian >/dev/null && exit 0
      fi
      exit 1      # not on Linux
   fi

#===============================================================================
# stup ---is-macos
#===============================================================================

   if [ "$1" == "---is-macos" ]; then
      if [ "$(uname)" == "Darwin" ]; then
         exit 0   # running on MacOs Darwin
      fi
      exit 1      # not on MacOs
   fi

#===============================================================================
# stup ---is-wsl
#===============================================================================

   if [ "$1" == "---is-wsl" ]; then
      if [ -d /dev/serial ]; then
         exit 0   # running on Windows WSL
      fi
      exit 1      # not running on Windows WSL
   fi

#===============================================================================
# helper: stup ---r 'text arg'   # internal helper: echo in red color
#         stup ---g 'text arg'   # internal helper: echo in green color
#         stup ---y 'text arg'   # internal helper: echo in yellow color
#===============================================================================

   if [ "$1" == "---r" ]; then
      printf "\x1b[31m";  shift;  echo "$*";  printf "\x1b[0m";  exit 0
   fi

   if [ "$1" == "---g" ]; then
      printf "\x1b[32m";  shift;  echo "$*";  printf "\x1b[0m";  exit 0
   fi

   if [ "$1" == "---y" ]; then
      printf "\x1b[33m";  shift;  echo "$*";  printf "\x1b[0m";  exit 0
   fi

   if [ "$1" == "---m" ]; then
      printf "\x1b[35m";  shift;  echo "$*";  printf "\x1b[0m";  exit 0
   fi

   if [ "$1" == "---c" ]; then
      printf "\x1b[36m";  shift;  echo "$*";  printf "\x1b[0m";  exit 0
   fi


   if [ "$1" == "---R" ]; then
      printf "\x1b[31m";  shift;  printf "$*";  printf "\x1b[0m";  exit 0
   fi

   if [ "$1" == "---G" ]; then
      printf "\x1b[32m";  shift;  printf "$*";  printf "\x1b[0m";  exit 0
   fi

#===============================================================================
# cannot deal with anything else ...
#===============================================================================

   printf "\x1b[31m";
   echo "bad command line: stup $*";  printf "\x1b[0m"
   echo '             for help invoke: stup --help'
   exit 1
